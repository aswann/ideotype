import glob

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from numpy import genfromtxt

from sql_declarative import (Base, WeaData, Sims, Params,
                             SiteInfo, LogInit, LogMAIZSIM,
                             NASSYield, SoilClass)

# TODO: think about sessions as SQLAlchemy's
# way to handle conflicts and serelizability, etc.


engine = create_engine('')  # TODO: decide where db is going to live

# Bind engine to metadata of Base class
# so declaratives can be accessed through a DBSession instance
Base.metadata.bind = engine


def insert_weadata(dirct_weadata, session=None):
    """
    Propagate values to DB table - WeaData.

    Parameters
    ----------
    dirct_weadata : str
        Directory where all weather file is stored.
        Make sure to include /* at the end in order to fetch
        all files stored in directory.
    session: str
        Database session, default to None and generates new session.

    """
    if session is None:
        DBSession = sessionmaker(bind=engine)
        session = DBSession()

    # fetch all weather files in directory
    weafiles = glob.glob(dirct_weadata)

    for weafile in weafiles:
        site_id = weafile.split('/')[-1].split('_')[0]
        year_id = int(weafile.split('/')[-1].split('_')[1].split('.')[0])
        data = genfromtxt(weafile,
                          delimiter='\t',
                          skip_header=1,
                          dtype=(int, object, int, float,
                                 float, float, float, int))

        for row in data:
            # make an object instance
            record = WeaData(
                site=site_id,
                year=year_id,
                jday=row[0],
                date=row[1],
                hour=row[2],
                solrad=row[3],
                temp=row[4],
                precip=row[5],
                rh=row[6],
                co2=row[7])

            # add row data to record
            session.add(record)

        # add data to database
        session.commit()


def insert_sims(dirct_sims, session=None):
    """ Propagate values to DB table - Sims.
    
    """
    if session is None:
        DBSession = sessionmaker(bind=engine)
        session = DBSession()


# TODO: likely will use site_summary.csv
# which was generated by some script - look up
# TODO: currently file has an extra index column
# I want to get rid of, need to lookup original code that made this file.


# TODO: add column - params
def insert_params(fpath_params, session=None):
    """
    Propagate values to DB table - Params.

    Parameters
    ----------
    fpath_params: str
        Path to params file.
    session: str
        Database session, default to None and generates new session.

    """
    if session is None:
        DBSession = sessionmaker(bind=engine)
        session = DBSession()

        data = genfromtxt(
            fpath_params,
            delimiter=',',
            skip_header=1,
            dtype=(float)  # TODO: finish this
            )

    runame = fpath_params.split('/')[-1].split('.')[0].split('_')[1]

    for count, row in enumerate(data):
        # make an object instance of the Params table
        record = Params(
            run_name=runame,
            cvar=count,
            juv_leaves=row[0],
            stayGreen=row[1],
            rmax_ltir=row[2],
            phyllo=row[3],
            LM_min=row[4],
            Vcmax=row[5],
            Vpmax=row[6],
            g1=row[7],
            ref_potential=row[8],
            rmax_ltar=row[9]
        )

        # add row data to record
        session.add(record)

    # commit data to DB
    session.commit()

# TODO: need to modify this site_summary csv file
# to not include an index column


def insert_sitinfo(fpath_siteinfo, session=None):
    """
    Propagate values to DB table - SiteInfo.

    Parameters
    ----------
    fpath_siteinfo : str
        Path to site_info file.
        Make sure to include /* at the end in order to fetch
        all files stored in directory.
    session: str
        Database session, default to None and generates new session.

    """
    if session is None:
        DBSession = sessionmaker(bind=engine)
        session = DBSession()

    data = genfromtxt(
        fpath_siteinfo,
        delimiter=',',
        skip_header=1,
        dtype=(str, )  # TODO: finish this
        )

    for row in data:
        # make an object instance of the SiteInfo table
        record = SiteInfo(
            site=row[0],
            state=row[3],
            lat=row[5],
            lon=row[6],
            years=row[7],
            area=row[8],
            perct_irri=row[9],
        )

        # add row data to record
        session.add(record)

    # commit data to DB
    session.commit()


def insert_loginit():
    """
    """
    pass


def insert_logmaizsim():
    """
    """
    pass
